{
  "version": 3,
  "sources": ["../../spatial-controls/dist/index.js"],
  "sourcesContent": ["/**\n * spatial-controls v6.1.2 build Fri Jun 28 2024\n * https://github.com/vanruesc/spatial-controls\n * Copyright 2017 Raoul van RÃ¼schen\n * @license Zlib\n */\n\n// src/core/Action.ts\nvar Action = /* @__PURE__ */ ((Action2) => {\n  Action2[Action2[\"MOVE_FORWARD\"] = 0] = \"MOVE_FORWARD\";\n  Action2[Action2[\"MOVE_LEFT\"] = 1] = \"MOVE_LEFT\";\n  Action2[Action2[\"MOVE_BACKWARD\"] = 2] = \"MOVE_BACKWARD\";\n  Action2[Action2[\"MOVE_RIGHT\"] = 3] = \"MOVE_RIGHT\";\n  Action2[Action2[\"MOVE_DOWN\"] = 4] = \"MOVE_DOWN\";\n  Action2[Action2[\"MOVE_UP\"] = 5] = \"MOVE_UP\";\n  Action2[Action2[\"ZOOM_OUT\"] = 6] = \"ZOOM_OUT\";\n  Action2[Action2[\"ZOOM_IN\"] = 7] = \"ZOOM_IN\";\n  Action2[Action2[\"BOOST\"] = 8] = \"BOOST\";\n  Action2[Action2[\"ROTATE\"] = 9] = \"ROTATE\";\n  return Action2;\n})(Action || {});\n\n// src/core/ControlMode.ts\nvar ControlMode = /* @__PURE__ */ ((ControlMode2) => {\n  ControlMode2[\"FIRST_PERSON\"] = \"first-person\";\n  ControlMode2[\"THIRD_PERSON\"] = \"third-person\";\n  return ControlMode2;\n})(ControlMode || {});\n\n// src/core/Direction.ts\nvar Direction = /* @__PURE__ */ ((Direction2) => {\n  Direction2[Direction2[\"FORWARD\"] = 0] = \"FORWARD\";\n  Direction2[Direction2[\"LEFT\"] = 1] = \"LEFT\";\n  Direction2[Direction2[\"BACKWARD\"] = 2] = \"BACKWARD\";\n  Direction2[Direction2[\"RIGHT\"] = 3] = \"RIGHT\";\n  Direction2[Direction2[\"DOWN\"] = 4] = \"DOWN\";\n  Direction2[Direction2[\"UP\"] = 5] = \"UP\";\n  return Direction2;\n})(Direction || {});\n\n// src/core/RotationControls.ts\nimport { EventDispatcher as EventDispatcher8, Quaternion as Quaternion2, Vector2, Vector3 as Vector35 } from \"three\";\n\n// src/input/PointerBehaviour.ts\nvar PointerBehaviour = /* @__PURE__ */ ((PointerBehaviour2) => {\n  PointerBehaviour2[\"DEFAULT\"] = \"default\";\n  PointerBehaviour2[\"LOCK\"] = \"lock\";\n  PointerBehaviour2[\"LOCK_HOLD\"] = \"lock-hold\";\n  return PointerBehaviour2;\n})(PointerBehaviour || {});\n\n// src/strategies/RotationStrategy.ts\nvar RotationStrategy = class {\n  /**\n   * The controls.\n   */\n  controls;\n  /**\n   * Constructs a new rotation strategy.\n   *\n   * @param controls - The controls.\n   */\n  constructor(controls) {\n    this.controls = controls;\n  }\n  execute(flag, event) {\n    const behaviour = this.controls.settings.pointer.behaviour;\n    const isMouse = event.type === \"mousedown\" || event.type === \"mouseup\";\n    if (isMouse && behaviour !== \"default\" /* DEFAULT */) {\n      this.controls.setPointerLocked();\n    } else {\n      this.controls.setRotationEnabled(flag);\n    }\n  }\n};\n\n// src/strategies/ZoomStrategy.ts\nvar ZoomStrategy = class {\n  /**\n   * A rotation manager.\n   */\n  rotationManager;\n  /**\n   * Indicates whether this zoom strategy should zoom in.\n   */\n  zoomIn;\n  /**\n   * Constructs a new zoom strategy.\n   *\n   * @param rotationManager - A rotation manager.\n   * @param zoomIn - Whether this strategy should zoom in.\n   */\n  constructor(rotationManager, zoomIn) {\n    this.rotationManager = rotationManager;\n    this.zoomIn = zoomIn;\n  }\n  execute(flag) {\n    if (flag) {\n      this.rotationManager.zoom(this.zoomIn ? -1 : 1);\n    }\n  }\n};\n\n// src/input/KeyCode.ts\nvar KeyCode = /* @__PURE__ */ ((KeyCode2) => {\n  KeyCode2[\"BACKSPACE\"] = \"Backspace\";\n  KeyCode2[\"TAB\"] = \"Tab\";\n  KeyCode2[\"ENTER\"] = \"Enter\";\n  KeyCode2[\"SHIFT_LEFT\"] = \"ShiftLeft\";\n  KeyCode2[\"SHIFT_RIGHT\"] = \"ShiftRight\";\n  KeyCode2[\"CTRL_LEFT\"] = \"ControlLeft\";\n  KeyCode2[\"CTRL_RIGHT\"] = \"ControlRight\";\n  KeyCode2[\"ALT_LEFT\"] = \"AltLeft\";\n  KeyCode2[\"ALT_RIGHT\"] = \"AltRight\";\n  KeyCode2[\"PAUSE\"] = \"Pause\";\n  KeyCode2[\"CAPS_LOCK\"] = \"CapsLock\";\n  KeyCode2[\"ESCAPE\"] = \"Escape\";\n  KeyCode2[\"SPACE\"] = \"Space\";\n  KeyCode2[\"PAGE_UP\"] = \"PageUp\";\n  KeyCode2[\"PAGE_DOWN\"] = \"PageDown\";\n  KeyCode2[\"END\"] = \"End\";\n  KeyCode2[\"HOME\"] = \"Home\";\n  KeyCode2[\"ARROW_LEFT\"] = \"ArrowLeft\";\n  KeyCode2[\"ARROW_UP\"] = \"ArrowUp\";\n  KeyCode2[\"ARROW_RIGHT\"] = \"ArrowRight\";\n  KeyCode2[\"ARROW_DOWN\"] = \"ArrowDown\";\n  KeyCode2[\"INSERT\"] = \"Insert\";\n  KeyCode2[\"DELETE\"] = \"Delete\";\n  KeyCode2[\"DIGIT_0\"] = \"Digit0\";\n  KeyCode2[\"DIGIT_1\"] = \"Digit1\";\n  KeyCode2[\"DIGIT_2\"] = \"Digit2\";\n  KeyCode2[\"DIGIT_3\"] = \"Digit3\";\n  KeyCode2[\"DIGIT_4\"] = \"Digit4\";\n  KeyCode2[\"DIGIT_5\"] = \"Digit5\";\n  KeyCode2[\"DIGIT_6\"] = \"Digit6\";\n  KeyCode2[\"DIGIT_7\"] = \"Digit7\";\n  KeyCode2[\"DIGIT_8\"] = \"Digit8\";\n  KeyCode2[\"DIGIT_9\"] = \"Digit9\";\n  KeyCode2[\"KEY_A\"] = \"KeyA\";\n  KeyCode2[\"KEY_B\"] = \"KeyB\";\n  KeyCode2[\"KEY_C\"] = \"KeyC\";\n  KeyCode2[\"KEY_D\"] = \"KeyD\";\n  KeyCode2[\"KEY_E\"] = \"KeyE\";\n  KeyCode2[\"KEY_F\"] = \"KeyF\";\n  KeyCode2[\"KEY_G\"] = \"KeyG\";\n  KeyCode2[\"KEY_H\"] = \"KeyH\";\n  KeyCode2[\"KEY_I\"] = \"KeyI\";\n  KeyCode2[\"KEY_J\"] = \"KeyJ\";\n  KeyCode2[\"KEY_K\"] = \"KeyK\";\n  KeyCode2[\"KEY_L\"] = \"KeyL\";\n  KeyCode2[\"KEY_M\"] = \"KeyM\";\n  KeyCode2[\"KEY_N\"] = \"KeyN\";\n  KeyCode2[\"KEY_O\"] = \"KeyO\";\n  KeyCode2[\"KEY_P\"] = \"KeyP\";\n  KeyCode2[\"KEY_Q\"] = \"KeyQ\";\n  KeyCode2[\"KEY_R\"] = \"KeyR\";\n  KeyCode2[\"KEY_S\"] = \"KeyS\";\n  KeyCode2[\"KEY_T\"] = \"KeyT\";\n  KeyCode2[\"KEY_U\"] = \"KeyU\";\n  KeyCode2[\"KEY_V\"] = \"KeyV\";\n  KeyCode2[\"KEY_W\"] = \"KeyW\";\n  KeyCode2[\"KEY_X\"] = \"KeyX\";\n  KeyCode2[\"KEY_Y\"] = \"KeyY\";\n  KeyCode2[\"KEY_Z\"] = \"KeyZ\";\n  KeyCode2[\"OS_LEFT\"] = \"OSLeft\";\n  KeyCode2[\"OS_RIGHT\"] = \"OSRight\";\n  KeyCode2[\"META_LEFT\"] = \"MetaLeft\";\n  KeyCode2[\"META_RIGHT\"] = \"MetaRight\";\n  KeyCode2[\"MEDIA_SELECT\"] = \"MediaSelect\";\n  KeyCode2[\"NUMPAD_0\"] = \"Numpad0\";\n  KeyCode2[\"NUMPAD_1\"] = \"Numpad1\";\n  KeyCode2[\"NUMPAD_2\"] = \"Numpad2\";\n  KeyCode2[\"NUMPAD_3\"] = \"Numpad3\";\n  KeyCode2[\"NUMPAD_4\"] = \"Numpad4\";\n  KeyCode2[\"NUMPAD_5\"] = \"Numpad5\";\n  KeyCode2[\"NUMPAD_6\"] = \"Numpad6\";\n  KeyCode2[\"NUMPAD_7\"] = \"Numpad7\";\n  KeyCode2[\"NUMPAD_8\"] = \"Numpad8\";\n  KeyCode2[\"NUMPAD_9\"] = \"Numpad9\";\n  KeyCode2[\"NUMPAD_MULTIPLY\"] = \"NumpadMultiply\";\n  KeyCode2[\"NUMPAD_ADD\"] = \"NumpadAdd\";\n  KeyCode2[\"NUMPAD_SUBTRACT\"] = \"NumpadSubtract\";\n  KeyCode2[\"NUMPAD_DECIMAL\"] = \"NumpadDecimal\";\n  KeyCode2[\"NUMPAD_DIVIDE\"] = \"NumpadDivide\";\n  KeyCode2[\"F1\"] = \"F1\";\n  KeyCode2[\"F2\"] = \"F2\";\n  KeyCode2[\"F3\"] = \"F3\";\n  KeyCode2[\"F4\"] = \"F4\";\n  KeyCode2[\"F5\"] = \"F5\";\n  KeyCode2[\"F6\"] = \"F6\";\n  KeyCode2[\"F7\"] = \"F7\";\n  KeyCode2[\"F8\"] = \"F8\";\n  KeyCode2[\"F9\"] = \"F9\";\n  KeyCode2[\"F10\"] = \"F10\";\n  KeyCode2[\"F11\"] = \"F11\";\n  KeyCode2[\"F12\"] = \"F12\";\n  KeyCode2[\"NUM_LOCK\"] = \"NumLock\";\n  KeyCode2[\"SCROLL_LOCK\"] = \"ScrollLock\";\n  KeyCode2[\"SEMICOLON\"] = \"Semicolon\";\n  KeyCode2[\"EQUAL\"] = \"Equal\";\n  KeyCode2[\"COMMA\"] = \"Comma\";\n  KeyCode2[\"MINUS\"] = \"Minus\";\n  KeyCode2[\"PERIOD\"] = \"Period\";\n  KeyCode2[\"SLASH\"] = \"Slash\";\n  KeyCode2[\"BACKQUOTE\"] = \"Backquote\";\n  KeyCode2[\"BRACKET_LEFT\"] = \"BracketLeft\";\n  KeyCode2[\"BRACKET_RIGHT\"] = \"BracketRight\";\n  KeyCode2[\"BACKSLASH\"] = \"Backslash\";\n  return KeyCode2;\n})(KeyCode || {});\n\n// src/input/keyCodeLegacy.ts\nvar keyCodeLegacy = /* @__PURE__ */ new Map([\n  [8, \"Backspace\" /* BACKSPACE */],\n  [9, \"Tab\" /* TAB */],\n  [13, \"Enter\" /* ENTER */],\n  [16, \"ShiftLeft\" /* SHIFT_LEFT */],\n  [17, \"ControlLeft\" /* CTRL_LEFT */],\n  [18, \"AltLeft\" /* ALT_LEFT */],\n  [19, \"Pause\" /* PAUSE */],\n  [20, \"CapsLock\" /* CAPS_LOCK */],\n  [27, \"Escape\" /* ESCAPE */],\n  [32, \"Space\" /* SPACE */],\n  [33, \"PageUp\" /* PAGE_UP */],\n  [34, \"PageDown\" /* PAGE_DOWN */],\n  [35, \"End\" /* END */],\n  [36, \"Home\" /* HOME */],\n  [37, \"ArrowLeft\" /* ARROW_LEFT */],\n  [38, \"ArrowUp\" /* ARROW_UP */],\n  [39, \"ArrowRight\" /* ARROW_RIGHT */],\n  [40, \"ArrowDown\" /* ARROW_DOWN */],\n  [45, \"Insert\" /* INSERT */],\n  [46, \"Delete\" /* DELETE */],\n  [48, \"Digit0\" /* DIGIT_0 */],\n  [49, \"Digit1\" /* DIGIT_1 */],\n  [50, \"Digit2\" /* DIGIT_2 */],\n  [51, \"Digit3\" /* DIGIT_3 */],\n  [52, \"Digit4\" /* DIGIT_4 */],\n  [53, \"Digit5\" /* DIGIT_5 */],\n  [54, \"Digit6\" /* DIGIT_6 */],\n  [55, \"Digit7\" /* DIGIT_7 */],\n  [56, \"Digit8\" /* DIGIT_8 */],\n  [57, \"Digit9\" /* DIGIT_9 */],\n  [65, \"KeyA\" /* KEY_A */],\n  [66, \"KeyB\" /* KEY_B */],\n  [67, \"KeyC\" /* KEY_C */],\n  [68, \"KeyD\" /* KEY_D */],\n  [69, \"KeyE\" /* KEY_E */],\n  [70, \"KeyF\" /* KEY_F */],\n  [71, \"KeyG\" /* KEY_G */],\n  [72, \"KeyH\" /* KEY_H */],\n  [73, \"KeyI\" /* KEY_I */],\n  [74, \"KeyJ\" /* KEY_J */],\n  [75, \"KeyK\" /* KEY_K */],\n  [76, \"KeyL\" /* KEY_L */],\n  [77, \"KeyM\" /* KEY_M */],\n  [78, \"KeyN\" /* KEY_N */],\n  [79, \"KeyO\" /* KEY_O */],\n  [80, \"KeyP\" /* KEY_P */],\n  [81, \"KeyQ\" /* KEY_Q */],\n  [82, \"KeyR\" /* KEY_R */],\n  [83, \"KeyS\" /* KEY_S */],\n  [84, \"KeyT\" /* KEY_T */],\n  [85, \"KeyU\" /* KEY_U */],\n  [86, \"KeyV\" /* KEY_V */],\n  [87, \"KeyW\" /* KEY_W */],\n  [88, \"KeyX\" /* KEY_X */],\n  [89, \"KeyY\" /* KEY_Y */],\n  [90, \"KeyZ\" /* KEY_Z */],\n  [91, \"MetaLeft\" /* META_LEFT */],\n  [92, \"MetaRight\" /* META_RIGHT */],\n  [93, \"MediaSelect\" /* MEDIA_SELECT */],\n  [96, \"Numpad0\" /* NUMPAD_0 */],\n  [97, \"Numpad1\" /* NUMPAD_1 */],\n  [98, \"Numpad2\" /* NUMPAD_2 */],\n  [99, \"Numpad3\" /* NUMPAD_3 */],\n  [100, \"Numpad4\" /* NUMPAD_4 */],\n  [101, \"Numpad5\" /* NUMPAD_5 */],\n  [102, \"Numpad6\" /* NUMPAD_6 */],\n  [103, \"Numpad7\" /* NUMPAD_7 */],\n  [104, \"Numpad8\" /* NUMPAD_8 */],\n  [105, \"Numpad9\" /* NUMPAD_9 */],\n  [106, \"NumpadMultiply\" /* NUMPAD_MULTIPLY */],\n  [107, \"NumpadAdd\" /* NUMPAD_ADD */],\n  [109, \"NumpadSubtract\" /* NUMPAD_SUBTRACT */],\n  [110, \"NumpadDecimal\" /* NUMPAD_DECIMAL */],\n  [111, \"NumpadDivide\" /* NUMPAD_DIVIDE */],\n  [112, \"F1\" /* F1 */],\n  [113, \"F2\" /* F2 */],\n  [114, \"F3\" /* F3 */],\n  [115, \"F4\" /* F4 */],\n  [116, \"F5\" /* F5 */],\n  [117, \"F6\" /* F6 */],\n  [118, \"F7\" /* F7 */],\n  [119, \"F8\" /* F8 */],\n  [120, \"F9\" /* F9 */],\n  [121, \"F10\" /* F10 */],\n  [122, \"F11\" /* F11 */],\n  [123, \"F12\" /* F12 */],\n  [144, \"NumLock\" /* NUM_LOCK */],\n  [145, \"ScrollLock\" /* SCROLL_LOCK */],\n  [186, \"Semicolon\" /* SEMICOLON */],\n  [187, \"Equal\" /* EQUAL */],\n  [188, \"Comma\" /* COMMA */],\n  [189, \"Minus\" /* MINUS */],\n  [190, \"Period\" /* PERIOD */],\n  [191, \"Slash\" /* SLASH */],\n  [192, \"Backquote\" /* BACKQUOTE */],\n  [219, \"BracketLeft\" /* BRACKET_LEFT */],\n  [221, \"BracketRight\" /* BRACKET_RIGHT */],\n  [220, \"Backslash\" /* BACKSLASH */]\n]);\n\n// src/input/PointerType.ts\nvar PointerType = /* @__PURE__ */ ((PointerType2) => {\n  PointerType2[\"MOUSE\"] = \"mouse\";\n  PointerType2[\"PEN\"] = \"pen\";\n  PointerType2[\"TOUCH\"] = \"touch\";\n  return PointerType2;\n})(PointerType || {});\n\n// src/managers/RotationManager.ts\nimport { EventDispatcher, Matrix4, Spherical, Vector3 } from \"three\";\n\n// src/core/time.ts\nvar MILLISECONDS_TO_SECONDS = 1 / 1e3;\n\n// src/math/ScalarDamper.ts\nvar ScalarDamper = class {\n  /**\n   * The maximum speed.\n   */\n  maxSpeed;\n  /**\n   * The current velocity.\n   */\n  velocity;\n  /**\n   * Constructs a new scalar damper.\n   *\n   * @param maxSpeed - The maximum speed at which the value can change.\n   */\n  constructor(maxSpeed = Number.POSITIVE_INFINITY) {\n    this.maxSpeed = maxSpeed;\n    this.velocity = 0;\n  }\n  /**\n   * Resets the velocity.\n   */\n  resetVelocity() {\n    this.velocity = 0;\n  }\n  /**\n   * Smooth interpolation with exponential velocity gain/decay.\n   *\n   * @param a - The start value.\n   * @param b - The target value.\n   * @param lambda - A smoothing factor.\n   * @param omega - See {@link ScalarDamper.calculateOmega}.\n   * @param exp - See {@link ScalarDamper.calculateExp}.\n   * @param dt - The delta time in seconds.\n   * @return The interpolated value.\n   */\n  interpolate(a, b, lambda, omega, exp, dt) {\n    const maxChange = this.maxSpeed * Math.max(lambda, 1e-4);\n    const change = Math.min(Math.max(a - b, -maxChange), maxChange);\n    const c = a - change;\n    const velocity = this.velocity;\n    const t = (velocity + omega * change) * dt;\n    this.velocity = (velocity - omega * t) * exp;\n    let result = c + (change + t) * exp;\n    if (Math.abs(change) < 1e-6) {\n      result = b;\n      this.velocity = 0;\n    } else if (b - a > 0 === result > b) {\n      this.velocity = (result - b) / dt;\n      result = b;\n    }\n    return result;\n  }\n  /**\n   * Calculates the Omega coefficient which can be reused for interpolations during the same frame.\n   *\n   * @param lambda - A smoothing factor.\n   * @return Omega.\n   */\n  static calculateOmega(lambda) {\n    return 2 / Math.max(lambda, 1e-4);\n  }\n  /**\n   * Calculates the exponentional factor which can be reused for interpolations during the same frame.\n   *\n   * @param omega - See {@link ScalarDamper.calculateOmega}.\n   * @param dt - The delta time in seconds.\n   * @return The exponentional interpolation factor.\n   */\n  static calculateExp(omega, dt) {\n    const x2 = omega * dt;\n    const x22 = x2 * x2;\n    return 1 / (1 + x2 + 0.48 * x22 + 0.235 * x2 * x22);\n  }\n};\n\n// src/managers/RotationManager.ts\nvar TWO_PI = 2 * Math.PI;\nvar u = /* @__PURE__ */ new Vector3();\nvar v = /* @__PURE__ */ new Vector3();\nvar m = /* @__PURE__ */ new Matrix4();\nvar RotationManager = class _RotationManager extends EventDispatcher {\n  /**\n   * Triggers when the position or quaternion is changed.\n   *\n   * @event\n   */\n  static EVENT_UPDATE = \"update\";\n  /**\n   * @see {@link position}\n   */\n  _position;\n  /**\n   * @see {@link quaternion}\n   */\n  _quaternion;\n  /**\n   * @see {@link target}\n   */\n  _target;\n  /**\n   * The settings.\n   */\n  settings;\n  /**\n   * The current spherical coordinates.\n   */\n  spherical0;\n  /**\n   * The spherical target coordinates.\n   */\n  spherical1;\n  /**\n   * Scalar dampers.\n   */\n  scalarDampers;\n  /**\n   * A timestamp.\n   */\n  timestamp;\n  /**\n   * A reusable update event.\n   */\n  updateEvent;\n  /**\n   * Constructs a new rotation manager.\n  \t *\n  \t * @param position - The position.\n  \t * @param quaternion - The quaternion.\n  \t * @param target - The target.\n  \t * @param settings - The settings.\n   */\n  constructor(position, quaternion, target, settings) {\n    super();\n    this._position = position;\n    this._quaternion = quaternion;\n    this._target = target;\n    this.settings = settings;\n    this.spherical0 = new Spherical();\n    this.spherical1 = new Spherical();\n    this.timestamp = 0;\n    this.updateEvent = { type: _RotationManager.EVENT_UPDATE };\n    this.scalarDampers = [\n      new ScalarDamper(),\n      new ScalarDamper(),\n      new ScalarDamper()\n    ];\n  }\n  /**\n   * The position.\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n  }\n  /**\n   * The quaternion.\n   */\n  get quaternion() {\n    return this._quaternion;\n  }\n  set quaternion(value) {\n    this._quaternion = value;\n  }\n  /**\n   * The target.\n   */\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n  }\n  /**\n   * The current radius.\n   */\n  get radius() {\n    return this.spherical0.radius;\n  }\n  /**\n   * Resets the current velocity.\n   */\n  resetVelocity() {\n    this.spherical1.copy(this.spherical0);\n    for (const scalarDamper of this.scalarDampers) {\n      scalarDamper.resetVelocity();\n    }\n  }\n  /**\n   * Restricts the spherical angles.\n   *\n   * @return This manager.\n   */\n  restrictAngles() {\n    const s = this.spherical1;\n    const rotation = this.settings.rotation;\n    const thetaMin = rotation.minAzimuthalAngle;\n    const thetaMax = rotation.maxAzimuthalAngle;\n    const phiMin = rotation.minPolarAngle;\n    const phiMax = rotation.maxPolarAngle;\n    s.theta = Math.min(Math.max(s.theta, thetaMin), thetaMax);\n    s.phi = Math.min(Math.max(s.phi, phiMin), phiMax);\n    if (s.phi === 0 || s.phi === Math.PI) {\n      s.makeSafe();\n    }\n    return this;\n  }\n  /**\n   * Restricts the spherical radius.\n   *\n   * @return This manager.\n   */\n  restrictRadius() {\n    const s = this.spherical1;\n    const zoom = this.settings.zoom;\n    const min = zoom.minDistance;\n    const max = zoom.maxDistance;\n    s.radius = Math.min(Math.max(s.radius, min), max);\n    return this;\n  }\n  /**\n   * Restricts the spherical system.\n   *\n   * @return This manager.\n   */\n  restrictSpherical() {\n    return this.restrictRadius().restrictAngles();\n  }\n  /**\n   * Updates the spherical coordinates based on the position and target.\n   *\n   * @return This manager.\n   */\n  updateSpherical() {\n    if (this.settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      const pivotOffset = this.settings.rotation.pivotOffset;\n      v.subVectors(u.subVectors(this.position, pivotOffset), this.target);\n      this.spherical1.setFromVector3(v);\n    } else {\n      this.spherical1.setFromVector3(this.target);\n    }\n    this.restrictSpherical();\n    this.spherical0.copy(this.spherical1);\n    return this;\n  }\n  /**\n   * Updates the position based on the spherical coordinates.\n   *\n   * @return This manager.\n   */\n  updatePosition() {\n    if (this.settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      const pivotOffset = this.settings.rotation.pivotOffset;\n      this.position.setFromSpherical(this.spherical0).add(this.target).add(pivotOffset);\n    }\n    return this;\n  }\n  /**\n   * Updates the quaternion.\n   *\n   * @return This manager.\n   */\n  updateQuaternion() {\n    const settings = this.settings;\n    const rotation = settings.rotation;\n    const target = this.target;\n    const up = u.copy(rotation.up);\n    const phi = this.spherical0.phi % TWO_PI;\n    if (phi < 0 && phi > -Math.PI || phi > Math.PI && phi < TWO_PI) {\n      up.negate();\n    }\n    if (settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      m.lookAt(v.subVectors(this.position, target), rotation.pivotOffset, up);\n    } else {\n      m.lookAt(v.set(0, 0, 0), target.setFromSpherical(this.spherical0), up);\n    }\n    this.quaternion.setFromRotationMatrix(m);\n    this.dispatchEvent(this.updateEvent);\n    return this;\n  }\n  /**\n   * Adjusts the spherical system.\n   *\n   * @param theta - The angle to add to theta in radians.\n   * @param phi - The angle to add to phi in radians.\n   * @return This manager.\n   */\n  adjustSpherical(theta, phi) {\n    const s = this.spherical1;\n    const settings = this.settings;\n    const rotation = settings.rotation;\n    const invertedY = rotation.invertedY;\n    const orbit = settings.general.mode === \"third-person\" /* THIRD_PERSON */;\n    const orbitXorInvertedY = (orbit || invertedY) && !(orbit && invertedY);\n    s.theta = rotation.invertedX ? s.theta + theta : s.theta - theta;\n    s.phi = orbitXorInvertedY ? s.phi - phi : s.phi + phi;\n    return this.restrictAngles();\n  }\n  /**\n   * Zooms in or out. Only applies in third person mode.\n   *\n   * @param sign - The zoom sign. Possible values are [-1, 0, 1].\n   * @return This manager.\n   */\n  zoom(sign) {\n    const s = this.spherical1;\n    const settings = this.settings;\n    const zoom = settings.zoom;\n    if (zoom.enabled && settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      const amount = sign * zoom.sensitivity;\n      s.radius = zoom.inverted ? s.radius - amount : s.radius + amount;\n      this.restrictRadius();\n    }\n    return this;\n  }\n  /**\n   * Looks at the given point.\n   *\n   * @param point - The target point.\n   * @return This manager.\n   */\n  lookAt(point) {\n    if (this.settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      this.target.copy(point).sub(this.settings.rotation.pivotOffset);\n    } else {\n      this.target.subVectors(point, this.position).normalize();\n    }\n    return this;\n  }\n  /**\n   * Returns the current view direction.\n   *\n   * @param view - A vector to store the direction in.\n   * @return The normalized view direction.\n   */\n  getViewDirection(view) {\n    const settings = this.settings;\n    const orbit = settings.general.mode === \"third-person\" /* THIRD_PERSON */;\n    view.setFromSpherical(this.spherical0).normalize();\n    return orbit ? view.negate() : view;\n  }\n  update(timestamp) {\n    const s0 = this.spherical0;\n    const s1 = this.spherical1;\n    const equal = s0.radius === s1.radius && s0.theta === s1.theta && s0.phi === s1.phi;\n    if (!equal) {\n      const settings = this.settings;\n      const scalarDampers = this.scalarDampers;\n      const elapsed = (timestamp - this.timestamp) * MILLISECONDS_TO_SECONDS;\n      if (settings.rotation.damping > 0) {\n        const damping = settings.rotation.damping;\n        const omega = ScalarDamper.calculateOmega(damping);\n        const exp = ScalarDamper.calculateExp(omega, elapsed);\n        s0.theta = scalarDampers[0].interpolate(s0.theta, s1.theta, damping, omega, exp, elapsed);\n        s0.phi = scalarDampers[1].interpolate(s0.phi, s1.phi, damping, omega, exp, elapsed);\n      } else {\n        s0.theta = s1.theta;\n        s0.phi = s1.phi;\n      }\n      if (settings.zoom.damping > 0) {\n        const damping = settings.zoom.damping;\n        const omega = ScalarDamper.calculateOmega(damping);\n        const exp = ScalarDamper.calculateExp(omega, elapsed);\n        s0.radius = scalarDampers[2].interpolate(s0.radius, s1.radius, damping, omega, exp, elapsed);\n      } else {\n        s0.radius = s1.radius;\n      }\n      this.updatePosition().updateQuaternion();\n    } else {\n      if (Math.abs(s0.theta) >= TWO_PI) {\n        s0.theta %= TWO_PI;\n        s1.theta %= TWO_PI;\n      }\n      if (Math.abs(s0.phi) >= TWO_PI) {\n        s0.phi %= TWO_PI;\n        s1.phi %= TWO_PI;\n      }\n    }\n    this.timestamp = timestamp;\n  }\n};\n\n// src/settings/Settings.ts\nimport { EventDispatcher as EventDispatcher7 } from \"three\";\n\n// src/input/PointerButton.ts\nvar PointerButton = /* @__PURE__ */ ((PointerButton2) => {\n  PointerButton2[PointerButton2[\"MAIN\"] = 0] = \"MAIN\";\n  PointerButton2[PointerButton2[\"AUXILIARY\"] = 1] = \"AUXILIARY\";\n  PointerButton2[PointerButton2[\"SECONDARY\"] = 2] = \"SECONDARY\";\n  return PointerButton2;\n})(PointerButton || {});\n\n// src/settings/Bindings.ts\nvar Bindings = class _Bindings {\n  /**\n   * The default bindings.\n   */\n  defaultActions;\n  /**\n   * A collection that maps keys to actions.\n   */\n  actions;\n  /**\n   * Constructs new input bindings.\n   */\n  constructor() {\n    this.defaultActions = /* @__PURE__ */ new Map();\n    this.actions = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Resets the current bindings to match the default bindings.\n   *\n   * @return This instance.\n   */\n  reset() {\n    this.actions = new Map(this.defaultActions);\n    return this;\n  }\n  /**\n   * Establishes default bindings and resets the current bindings.\n   *\n   * @param actions - A collection that maps keys to actions.\n   * @return This instance.\n   */\n  setDefault(actions) {\n    this.defaultActions = actions;\n    return this.reset();\n  }\n  /**\n   * Clears the default bindings.\n   *\n   * @return This instance.\n   */\n  clearDefault() {\n    this.defaultActions.clear();\n    return this;\n  }\n  /**\n   * Clears the current bindings.\n   *\n   * @return This instance.\n   */\n  clear() {\n    this.actions.clear();\n    return this;\n  }\n  /**\n   * Copies the given bindings, including the default bindings.\n   *\n   * @param bindings - Bindings.\n   * @return This instance.\n   */\n  copy(bindings) {\n    this.defaultActions = new Map(bindings.defaultActions);\n    this.actions = new Map(bindings.actions);\n    return this;\n  }\n  /**\n   * Clones these bindings.\n   *\n   * @return The cloned bindings.\n   */\n  clone() {\n    const clone = new _Bindings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    if (json !== void 0) {\n      this.defaultActions = new Map(json.defaultActions);\n      this.actions = new Map(json.actions);\n    }\n    return this;\n  }\n  /**\n   * Checks if the given key is bound to an action.\n   *\n   * @param key - A key.\n   * @return Whether the given key is bound to an action.\n   */\n  has(key) {\n    return this.actions.has(key);\n  }\n  /**\n   * Returns the action that is bound to the given key.\n   *\n   * @param key - A key.\n   * @return The action, or undefined if the key is not bound to any action.\n   */\n  get(key) {\n    return this.actions.get(key);\n  }\n  /**\n   * Binds a key to an action.\n   *\n   * @param key - A key.\n   * @param action - An action.\n   * @return This instance.\n   */\n  set(key, action) {\n    this.actions.set(key, action);\n    return this;\n  }\n  /**\n   * Unbinds a key.\n   *\n   * @param key - The key.\n   * @return Whether the binding existed.\n   */\n  delete(key) {\n    return this.actions.delete(key);\n  }\n  toJSON() {\n    return {\n      defaultActions: [...this.defaultActions],\n      actions: [...this.actions]\n    };\n  }\n};\n\n// src/settings/GeneralSettings.ts\nimport { EventDispatcher as EventDispatcher2 } from \"three\";\nvar GeneralSettings = class _GeneralSettings extends EventDispatcher2 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * @see {@link mode}\n   */\n  _mode;\n  /**\n   * @see {@link previousMode}\n   */\n  _previousMode;\n  /**\n   * Constructs new general settings.\n   */\n  constructor() {\n    super();\n    this._mode = \"first-person\" /* FIRST_PERSON */;\n    this._previousMode = this._mode;\n  }\n  /**\n   * The previous control mode.\n   *\n   * @internal\n   */\n  get previousMode() {\n    return this._previousMode;\n  }\n  /**\n   * The control mode.\n   */\n  get mode() {\n    return this._mode;\n  }\n  set mode(value) {\n    if (this._mode !== value) {\n      this._mode = value;\n      this.dispatchEvent({ type: _GeneralSettings.EVENT_CHANGE });\n      this._previousMode = value;\n    }\n  }\n  /**\n   * Copies the given general settings.\n   *\n   * @param settings - General settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.mode = settings.mode;\n    return this;\n  }\n  /**\n   * Clones this general settings instance.\n   *\n   * @return The cloned general settings.\n   */\n  clone() {\n    const clone = new _GeneralSettings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    this.mode = json.mode;\n    return this;\n  }\n  toJSON() {\n    return {\n      mode: this.mode\n    };\n  }\n};\n\n// src/settings/PointerSettings.ts\nimport { EventDispatcher as EventDispatcher3 } from \"three\";\nvar PointerSettings = class _PointerSettings extends EventDispatcher3 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * @see {@link behaviour}\n   */\n  _behaviour;\n  /**\n   * @see {@link sensitivity}\n   */\n  _sensitivity;\n  /**\n   * Constructs new pointer settings.\n   */\n  constructor() {\n    super();\n    this._behaviour = \"default\" /* DEFAULT */;\n    this._sensitivity = 1e-3;\n  }\n  /**\n   * The pointer behaviour.\n   */\n  get behaviour() {\n    return this._behaviour;\n  }\n  set behaviour(value) {\n    this._behaviour = value;\n    this.dispatchEvent({ type: _PointerSettings.EVENT_CHANGE });\n  }\n  /**\n   * Sets the sensitivity.\n   *\n   * This sensitivity acts as a baseline scale for pointer movement deltas. Default is `1e-3`.\n   */\n  get sensitivity() {\n    return this._sensitivity;\n  }\n  set sensitivity(value) {\n    this._sensitivity = value;\n    this.dispatchEvent({ type: _PointerSettings.EVENT_CHANGE });\n  }\n  /**\n   * Copies the given pointer settings.\n   *\n   * @param settings - Pointer settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.behaviour = settings.behaviour;\n    this.sensitivity = settings.sensitivity;\n    return this;\n  }\n  /**\n   * Clones this pointer settings instance.\n   *\n   * @return The cloned pointer settings.\n   */\n  clone() {\n    const clone = new _PointerSettings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    this.behaviour = json.behaviour;\n    this.sensitivity = json.sensitivity;\n    return this;\n  }\n  toJSON() {\n    return {\n      behaviour: this.behaviour,\n      sensitivity: this.sensitivity\n    };\n  }\n};\n\n// src/settings/RotationSettings.ts\nimport { EventDispatcher as EventDispatcher4, Vector3 as Vector33 } from \"three\";\n\n// src/core/axes.ts\nimport { Vector3 as Vector32 } from \"three\";\nvar x = new Vector32(1, 0, 0);\nvar y = new Vector32(0, 1, 0);\nvar z = new Vector32(0, 0, 1);\n\n// src/settings/RotationSettings.ts\nvar RotationSettings = class _RotationSettings extends EventDispatcher4 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * @see {@link up}\n   */\n  _up;\n  /**\n   * @see {@link pivotOffset}\n   */\n  _pivotOffset;\n  /**\n   * @see {@link minAzimuthalAngle}\n   */\n  _minAzimuthalAngle;\n  /**\n   * @see {@link maxAzimuthalAngle}\n   */\n  _maxAzimuthalAngle;\n  /**\n   * @see {@link minPolarAngle}\n   */\n  _minPolarAngle;\n  /**\n   * @see {@link maxPolarAngle}\n   */\n  _maxPolarAngle;\n  /**\n   * @see {@link invertedX}\n   */\n  _invertedX;\n  /**\n   * @see {@link invertedY}\n   */\n  _invertedY;\n  /**\n   * @see {@link sensitivityX}\n   */\n  _sensitivityX;\n  /**\n   * @see {@link sensitivityY}\n   */\n  _sensitivityY;\n  /**\n   * @see {@link damping}\n   */\n  _damping;\n  /**\n   * Constructs new rotation settings.\n   */\n  constructor() {\n    super();\n    this._enabled = true;\n    this._up = new Vector33();\n    this._up.copy(y);\n    this._pivotOffset = new Vector33();\n    this._minAzimuthalAngle = Number.NEGATIVE_INFINITY;\n    this._maxAzimuthalAngle = Number.POSITIVE_INFINITY;\n    this._minPolarAngle = 0;\n    this._maxPolarAngle = Math.PI;\n    this._invertedX = false;\n    this._invertedY = false;\n    this._sensitivityX = 1;\n    this._sensitivityY = 1;\n    this._damping = 0;\n  }\n  /**\n   * Indicates whether rotation is enabled.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * A normalized up vector.\n   */\n  get up() {\n    return this._up;\n  }\n  set up(value) {\n    this._up = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The pivot offset.\n   */\n  get pivotOffset() {\n    return this._pivotOffset;\n  }\n  set pivotOffset(value) {\n    this._pivotOffset = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The minimum azimuthal angle in radians. Range: [-Math.PI, Math.PI].\n   */\n  get minAzimuthalAngle() {\n    return this._minAzimuthalAngle;\n  }\n  set minAzimuthalAngle(value) {\n    this._minAzimuthalAngle = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The maximum azimuthal angle in radians. Range: [-Math.PI, Math.PI].\n   */\n  get maxAzimuthalAngle() {\n    return this._maxAzimuthalAngle;\n  }\n  set maxAzimuthalAngle(value) {\n    this._maxAzimuthalAngle = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The minimum polar angle in radians. Range: [0, Math.PI].\n   */\n  get minPolarAngle() {\n    return this._minPolarAngle;\n  }\n  set minPolarAngle(value) {\n    this._minPolarAngle = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The maximum polar angle in radians. Range: [0, Math.PI].\n   */\n  get maxPolarAngle() {\n    return this._maxPolarAngle;\n  }\n  set maxPolarAngle(value) {\n    this._maxPolarAngle = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Indicates whether the horizontal rotation is inverted.\n   */\n  get invertedX() {\n    return this._invertedX;\n  }\n  set invertedX(value) {\n    this._invertedX = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Indicates whether the vertical rotation is inverted.\n   */\n  get invertedY() {\n    return this._invertedY;\n  }\n  set invertedY(value) {\n    this._invertedY = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The horizontal rotation sensitivity.\n   */\n  get sensitivityX() {\n    return this._sensitivityX;\n  }\n  set sensitivityX(value) {\n    this._sensitivityX = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The vertical rotation sensitivity.\n   */\n  get sensitivityY() {\n    return this._sensitivityY;\n  }\n  set sensitivityY(value) {\n    this._sensitivityY = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Sets the horizontal and vertical rotation sensitivity.\n   */\n  set sensitivity(value) {\n    this._sensitivityX = this._sensitivityY = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The damping factor.\n   */\n  get damping() {\n    return this._damping;\n  }\n  set damping(value) {\n    this._damping = value;\n    this.dispatchEvent({ type: _RotationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Copies the given rotation settings.\n   *\n   * @param settings - Rotation settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.up.copy(settings.up);\n    this.pivotOffset.copy(settings.pivotOffset);\n    this.minAzimuthalAngle = settings.minAzimuthalAngle;\n    this.maxAzimuthalAngle = settings.maxAzimuthalAngle;\n    this.minPolarAngle = settings.minPolarAngle;\n    this.maxPolarAngle = settings.maxPolarAngle;\n    this.invertedX = settings.invertedX;\n    this.invertedY = settings.invertedY;\n    this.sensitivityX = settings.sensitivityX;\n    this.sensitivityY = settings.sensitivityY;\n    this.damping = settings.damping;\n    return this;\n  }\n  /**\n   * Clones this rotation settings instance.\n   *\n   * @return The cloned rotation settings.\n   */\n  clone() {\n    const clone = new _RotationSettings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    this.enabled = json.enabled;\n    this.up.copy(json.up);\n    this.pivotOffset.copy(json.pivotOffset);\n    this.minAzimuthalAngle = json.minAzimuthalAngle !== null ? json.minAzimuthalAngle : Number.NEGATIVE_INFINITY;\n    this.maxAzimuthalAngle = json.maxAzimuthalAngle !== null ? json.maxAzimuthalAngle : Number.POSITIVE_INFINITY;\n    this.minPolarAngle = json.minPolarAngle !== null ? json.minPolarAngle : Number.NEGATIVE_INFINITY;\n    this.maxPolarAngle = json.maxPolarAngle !== null ? json.maxPolarAngle : Number.POSITIVE_INFINITY;\n    this.invertedX = json.invertedX;\n    this.invertedY = json.invertedY;\n    this.sensitivityX = json.sensitivityX;\n    this.sensitivityY = json.sensitivityY;\n    this.damping = json.damping;\n    return this;\n  }\n  toJSON() {\n    return {\n      enabled: this.enabled,\n      up: this.up,\n      pivotOffset: this.pivotOffset,\n      minAzimuthalAngle: this.minAzimuthalAngle,\n      maxAzimuthalAngle: this.maxAzimuthalAngle,\n      minPolarAngle: this.minPolarAngle,\n      maxPolarAngle: this.maxPolarAngle,\n      invertedX: this.invertedX,\n      invertedY: this.invertedY,\n      sensitivityX: this.sensitivityX,\n      sensitivityY: this.sensitivityY,\n      damping: this.damping\n    };\n  }\n};\n\n// src/settings/TranslationSettings.ts\nimport { EventDispatcher as EventDispatcher5, Vector3 as Vector34 } from \"three\";\nvar TranslationSettings = class _TranslationSettings extends EventDispatcher5 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * @see {@link sensitivity}\n   */\n  _sensitivity;\n  /**\n   * @see {@link boostMultiplier}\n   */\n  _boostMultiplier;\n  /**\n   * @see {@link axisModifier}\n   */\n  _axisWeights;\n  /**\n   * @see {@link damping}\n   */\n  _damping;\n  /**\n   * Constructs new translation settings.\n   */\n  constructor() {\n    super();\n    this._enabled = true;\n    this._sensitivity = 1;\n    this._boostMultiplier = 2;\n    this._axisWeights = new Vector34(1, 1, 1);\n    this._damping = 0;\n  }\n  /**\n   * Indicates whether positional translation is enabled.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    this.dispatchEvent({ type: _TranslationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The translation sensitivity.\n   */\n  get sensitivity() {\n    return this._sensitivity;\n  }\n  set sensitivity(value) {\n    this._sensitivity = value;\n    this.dispatchEvent({ type: _TranslationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The translation boost multiplier.\n   */\n  get boostMultiplier() {\n    return this._boostMultiplier;\n  }\n  set boostMultiplier(value) {\n    this._boostMultiplier = Math.max(value, 1);\n    this.dispatchEvent({ type: _TranslationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Weights that influence movement along each axis.\n   */\n  get axisWeights() {\n    return this._axisWeights;\n  }\n  set axisWeights(value) {\n    this._axisWeights = value;\n    this.dispatchEvent({ type: _TranslationSettings.EVENT_CHANGE });\n  }\n  /**\n   * The damping factor. Range is [0.0, +Infinity]. Set to 0 to disable.\n   */\n  get damping() {\n    return this._damping;\n  }\n  set damping(value) {\n    this._damping = value;\n    this.dispatchEvent({ type: _TranslationSettings.EVENT_CHANGE });\n  }\n  /**\n   * Copies the given translation settings.\n   *\n   * @param settings - Translation settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.enabled = settings.enabled;\n    this.sensitivity = settings.sensitivity;\n    this.boostMultiplier = settings.boostMultiplier;\n    this.damping = settings.damping;\n    return this;\n  }\n  /**\n   * Clones this translation settings instance.\n   *\n   * @return The cloned translation settings.\n   */\n  clone() {\n    const clone = new _TranslationSettings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    this.enabled = json.enabled;\n    this.sensitivity = json.sensitivity;\n    this.boostMultiplier = json.boostMultiplier;\n    this.damping = json.damping;\n    if (json.axisWeights !== void 0) {\n      this.axisWeights.copy(json.axisWeights);\n    }\n    return this;\n  }\n  toJSON() {\n    return {\n      enabled: this.enabled,\n      sensitivity: this.sensitivity,\n      boostMultiplier: this.boostMultiplier,\n      axisWeights: this.axisWeights,\n      damping: this.damping\n    };\n  }\n};\n\n// src/settings/ZoomSettings.ts\nimport { EventDispatcher as EventDispatcher6 } from \"three\";\nvar ZoomSettings = class _ZoomSettings extends EventDispatcher6 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * @see {@link inverted}\n   */\n  _inverted;\n  /**\n   * @see {@link minDistance}\n   */\n  _minDistance;\n  /**\n   * @see {@link maxDistance}\n   */\n  _maxDistance;\n  /**\n   * @see {@link sensitivity}\n   */\n  _sensitivity;\n  /**\n   * @see {@link damping}\n   */\n  _damping;\n  /**\n   * Constructs new zoom settings.\n   */\n  constructor() {\n    super();\n    this._enabled = true;\n    this._inverted = false;\n    this._minDistance = 1e-6;\n    this._maxDistance = Number.POSITIVE_INFINITY;\n    this._sensitivity = 1;\n    this._damping = 0;\n  }\n  /**\n   * Indicates whether zooming is enabled.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * Indicates whether the zoom controls should be inverted.\n   */\n  get inverted() {\n    return this._inverted;\n  }\n  set inverted(value) {\n    this._inverted = value;\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * The minimum zoom distance.\n   */\n  get minDistance() {\n    return this._minDistance;\n  }\n  set minDistance(value) {\n    this._minDistance = Math.min(\n      Math.max(value, 1e-6),\n      Number.POSITIVE_INFINITY\n    );\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * The maximum zoom distance.\n   */\n  get maxDistance() {\n    return this._maxDistance;\n  }\n  set maxDistance(value) {\n    this._maxDistance = Math.min(\n      Math.max(value, this._minDistance),\n      Number.POSITIVE_INFINITY\n    );\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * Sets the minimum and maximum zoom distance.\n   *\n   * @param min - The minimum distance.\n   * @param max - The maximum distance.\n   */\n  setRange(min, max) {\n    this._minDistance = min;\n    this._maxDistance = max;\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * The zoom sensitivity.\n   */\n  get sensitivity() {\n    return this._sensitivity;\n  }\n  set sensitivity(value) {\n    this._sensitivity = value;\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * The damping factor.\n   */\n  get damping() {\n    return this._damping;\n  }\n  set damping(value) {\n    this._damping = value;\n    this.dispatchEvent({ type: _ZoomSettings.EVENT_CHANGE });\n  }\n  /**\n   * Copies the given zoom settings.\n   *\n   * @param settings - Zoom settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.enabled = settings.enabled;\n    this.inverted = settings.inverted;\n    this.minDistance = settings.minDistance;\n    this.maxDistance = settings.maxDistance;\n    this.sensitivity = settings.sensitivity;\n    this.damping = settings.damping;\n    return this;\n  }\n  /**\n   * Clones this zoom settings instance.\n   *\n   * @return The cloned zoom settings.\n   */\n  clone() {\n    const clone = new _ZoomSettings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    this.enabled = json.enabled;\n    this.inverted = json.inverted;\n    this.minDistance = json.minDistance;\n    this.maxDistance = json.maxDistance || Number.POSITIVE_INFINITY;\n    this.sensitivity = json.sensitivity;\n    this.damping = json.damping;\n    return this;\n  }\n  toJSON() {\n    return {\n      enabled: this.enabled,\n      inverted: this.inverted,\n      minDistance: this.minDistance,\n      maxDistance: this.maxDistance,\n      sensitivity: this.sensitivity,\n      damping: this.damping\n    };\n  }\n};\n\n// src/settings/Settings.ts\nvar Settings = class _Settings extends EventDispatcher7 {\n  /**\n   * Triggers when the settings are changed.\n   *\n   * @event\n   */\n  static EVENT_CHANGE = \"change\";\n  /**\n   * Key bindings.\n   *\n   * This collection maps {@linkplain KeyCode key codes} to {@linkplain Action actions}.\n   */\n  keyBindings;\n  /**\n   * Pointer bindings.\n   *\n   * This collection maps {@linkplain PointerButton pointer buttons} to {@linkplain Action actions}.\n   */\n  pointerBindings;\n  /**\n   * General settings.\n   */\n  general;\n  /**\n   * Pointer settings.\n   */\n  pointer;\n  /**\n   * Rotation settings.\n   */\n  rotation;\n  /**\n   * Translation settings.\n   */\n  translation;\n  /**\n   * Zoom settings.\n   */\n  zoom;\n  /**\n   * Constructs new settings.\n   */\n  constructor() {\n    super();\n    this.keyBindings = new Bindings();\n    this.keyBindings.setDefault(/* @__PURE__ */ new Map([\n      [\"KeyW\" /* KEY_W */, 0 /* MOVE_FORWARD */],\n      [\"KeyA\" /* KEY_A */, 1 /* MOVE_LEFT */],\n      [\"KeyS\" /* KEY_S */, 2 /* MOVE_BACKWARD */],\n      [\"KeyD\" /* KEY_D */, 3 /* MOVE_RIGHT */],\n      [\"ArrowUp\" /* ARROW_UP */, 0 /* MOVE_FORWARD */],\n      [\"ArrowLeft\" /* ARROW_LEFT */, 1 /* MOVE_LEFT */],\n      [\"ArrowDown\" /* ARROW_DOWN */, 2 /* MOVE_BACKWARD */],\n      [\"ArrowRight\" /* ARROW_RIGHT */, 3 /* MOVE_RIGHT */],\n      [\"KeyX\" /* KEY_X */, 4 /* MOVE_DOWN */],\n      [\"Space\" /* SPACE */, 5 /* MOVE_UP */],\n      [\"PageDown\" /* PAGE_DOWN */, 6 /* ZOOM_OUT */],\n      [\"PageUp\" /* PAGE_UP */, 7 /* ZOOM_IN */],\n      [\"ShiftLeft\" /* SHIFT_LEFT */, 8 /* BOOST */]\n    ]));\n    this.pointerBindings = new Bindings();\n    this.pointerBindings.setDefault(/* @__PURE__ */ new Map([\n      [0 /* MAIN */, 9 /* ROTATE */]\n    ]));\n    this.general = new GeneralSettings();\n    this.pointer = new PointerSettings();\n    this.rotation = new RotationSettings();\n    this.translation = new TranslationSettings();\n    this.zoom = new ZoomSettings();\n    this.general.addEventListener(_Settings.EVENT_CHANGE, (e) => this.dispatchEvent(e));\n    this.pointer.addEventListener(_Settings.EVENT_CHANGE, (e) => this.dispatchEvent(e));\n    this.rotation.addEventListener(_Settings.EVENT_CHANGE, (e) => this.dispatchEvent(e));\n    this.translation.addEventListener(_Settings.EVENT_CHANGE, (e) => this.dispatchEvent(e));\n    this.zoom.addEventListener(_Settings.EVENT_CHANGE, (e) => this.dispatchEvent(e));\n  }\n  /**\n   * Copies the given settings.\n   *\n   * @param settings - Settings.\n   * @return This instance.\n   */\n  copy(settings) {\n    this.keyBindings.copy(settings.keyBindings);\n    this.pointerBindings.copy(settings.pointerBindings);\n    this.general.copy(settings.general);\n    this.pointer.copy(settings.pointer);\n    this.rotation.copy(settings.rotation);\n    this.translation.copy(settings.translation);\n    this.zoom.copy(settings.zoom);\n    this.dispatchEvent({ type: _Settings.EVENT_CHANGE });\n    return this;\n  }\n  /**\n   * Clones these settings.\n   *\n   * @return The cloned settings.\n   */\n  clone() {\n    const clone = new _Settings();\n    return clone.copy(this);\n  }\n  /**\n   * Copies the given JSON data.\n   *\n   * @param json - The JSON data string.\n   * @return This instance.\n   */\n  fromJSON(json) {\n    const settings = JSON.parse(json);\n    this.keyBindings.fromJSON(settings.keyBindings);\n    this.pointerBindings.fromJSON(settings.pointerBindings);\n    this.general.fromJSON(settings.general);\n    this.pointer.fromJSON(settings.pointer);\n    this.rotation.fromJSON(settings.rotation);\n    this.translation.fromJSON(settings.translation);\n    this.zoom.fromJSON(settings.zoom);\n    this.dispatchEvent({ type: _Settings.EVENT_CHANGE });\n    return this;\n  }\n  /**\n   * Exports these settings as a data blob.\n   *\n   * @return The settings blob.\n   */\n  toBlob() {\n    return new Blob([JSON.stringify(this)], {\n      type: \"text/json\"\n    });\n  }\n  toJSON() {\n    return {\n      keyBindings: this.keyBindings,\n      pointerBindings: this.pointerBindings,\n      general: this.general,\n      pointer: this.pointer,\n      rotation: this.rotation,\n      translation: this.translation,\n      zoom: this.zoom\n    };\n  }\n};\n\n// src/core/RotationControls.ts\nvar v2 = /* @__PURE__ */ new Vector35();\nvar p = /* @__PURE__ */ new Vector2();\nvar RotationControls = class _RotationControls extends EventDispatcher8 {\n  /**\n   * Triggers when the quaternion is changed.\n   *\n   * @event\n   */\n  static EVENT_UPDATE = \"update\";\n  /**\n   * @see {@link domElement}\n   */\n  _domElement;\n  /**\n   * A rotation manager.\n   */\n  rotationManager;\n  /**\n   * A map that links actions to specific strategies.\n   */\n  strategies;\n  /**\n   * Indicates whether the user is currently holding the pointer button down.\n   */\n  dragging;\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * The control settings.\n   */\n  settings;\n  /**\n   * Constructs new controls.\n   *\n   * @param position - A position.\n   * @param quaternion - A quaternion.\n   * @param target - A target.\n   * @param settings - The settings.\n   */\n  constructor(position = new Vector35(), quaternion = new Quaternion2(), target = new Vector35(), settings = new Settings()) {\n    super();\n    this._domElement = null;\n    this._enabled = false;\n    this.dragging = false;\n    this.settings = settings;\n    settings.addEventListener(\"change\", (e) => this.handleEvent(e));\n    this.rotationManager = new RotationManager(position, quaternion, target, settings);\n    this.rotationManager.addEventListener(_RotationControls.EVENT_UPDATE, (e) => this.dispatchEvent(e));\n    this.strategies = /* @__PURE__ */ new Map([\n      [6 /* ZOOM_OUT */, new ZoomStrategy(this.rotationManager, false)],\n      [7 /* ZOOM_IN */, new ZoomStrategy(this.rotationManager, true)],\n      [9 /* ROTATE */, new RotationStrategy(this)]\n    ]);\n  }\n  /**\n   * A DOM element. Acts as the primary event target.\n   */\n  get domElement() {\n    return this._domElement;\n  }\n  set domElement(value) {\n    this._domElement = value;\n    const enabled = this.enabled;\n    this.dispose();\n    this.enabled = enabled;\n  }\n  /**\n   * The position.\n   */\n  get position() {\n    return this.rotationManager.position;\n  }\n  set position(value) {\n    this.rotationManager.position = value;\n  }\n  /**\n   * The quaternion.\n   */\n  get quaternion() {\n    return this.rotationManager.quaternion;\n  }\n  set quaternion(value) {\n    this.rotationManager.quaternion = value;\n  }\n  /**\n   * The target.\n   */\n  get target() {\n    return this.rotationManager.target;\n  }\n  set target(value) {\n    this.rotationManager.target = value;\n  }\n  /**\n   * Looks at the given point.\n   *\n   * @param x - The X-coordinate, or a point.\n   * @param y - The Y-coordinate.\n   * @param z - The Z-coordinate.\n   * @return This instance.\n   */\n  lookAt(x2, y2, z2) {\n    if (x2 instanceof Vector35) {\n      this.rotationManager.lookAt(x2);\n    } else {\n      this.rotationManager.lookAt(v2.set(x2, y2, z2));\n    }\n    return this;\n  }\n  /**\n   * Returns the current view direction.\n   *\n   * @param view - A vector to store the direction in.\n   * @return The normalized view direction.\n   */\n  getViewDirection(view) {\n    return this.rotationManager.getViewDirection(view);\n  }\n  /**\n   * Indicates whether the controls are enabled.\n   *\n   * Event listeners will be registered or unregistered depending on this flag.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    if (this.domElement === null || typeof document === \"undefined\") {\n      return;\n    }\n    const domElement = this.domElement;\n    if (value && !this._enabled) {\n      domElement.style.touchAction = \"none\";\n      document.addEventListener(\"pointerlockchange\", this);\n      document.addEventListener(\"pointerlockerror\", this);\n      document.addEventListener(\"visibilitychange\", this);\n      document.body.addEventListener(\"keyup\", this);\n      document.body.addEventListener(\"keydown\", this);\n      domElement.addEventListener(\"mousedown\", this);\n      domElement.addEventListener(\"mouseup\", this);\n      domElement.addEventListener(\"pointerdown\", this);\n      domElement.addEventListener(\"pointerup\", this);\n      domElement.addEventListener(\"pointercancel\", this);\n      domElement.addEventListener(\"wheel\", this, { passive: true });\n    } else if (!value && this._enabled) {\n      domElement.style.touchAction = \"\";\n      document.removeEventListener(\"pointerlockchange\", this);\n      document.removeEventListener(\"pointerlockerror\", this);\n      document.removeEventListener(\"visibilitychange\", this);\n      document.body.removeEventListener(\"keyup\", this);\n      document.body.removeEventListener(\"keydown\", this);\n      domElement.removeEventListener(\"mousedown\", this);\n      domElement.removeEventListener(\"mouseup\", this);\n      domElement.removeEventListener(\"pointerdown\", this);\n      domElement.removeEventListener(\"pointerup\", this);\n      domElement.removeEventListener(\"pointercancel\", this);\n      domElement.removeEventListener(\"wheel\", this);\n      domElement.removeEventListener(\"pointermove\", this);\n    }\n    this.rotationManager.resetVelocity();\n    this.setPointerLocked(false);\n    this._enabled = value;\n  }\n  /**\n   * Locks or unlocks the pointer.\n   *\n   * @see {@link handlePointerLockEvent}\n   * @param locked - Whether the pointer should be locked.\n   */\n  setPointerLocked(locked = true) {\n    if (locked) {\n      if (document.pointerLockElement !== this.domElement && this.domElement?.requestPointerLock !== void 0) {\n        this.domElement.requestPointerLock();\n      }\n    } else if (document.exitPointerLock !== void 0) {\n      document.exitPointerLock();\n    }\n  }\n  /**\n   * Enables or disables the rotation mode.\n   *\n   * @param enabled - Whether the rotation mode should be activated.\n   */\n  setRotationEnabled(enabled) {\n    if (this.settings.rotation.enabled && enabled) {\n      this.domElement?.addEventListener(\"pointermove\", this, { passive: true });\n    } else {\n      this.domElement?.removeEventListener(\"pointermove\", this);\n    }\n  }\n  /**\n   * Handles pointer move events.\n   *\n   * @param event - A pointer event.\n   */\n  handlePointerMoveEvent(event) {\n    const settings = this.settings;\n    const rotation = settings.rotation;\n    const pointerBehaviour = settings.pointer.behaviour;\n    const pointerSensitivity = settings.pointer.sensitivity;\n    const rotationManager = this.rotationManager;\n    if (pointerBehaviour !== \"lock-hold\" /* LOCK_HOLD */ || this.dragging) {\n      let { movementX, movementY } = event;\n      if (movementX === void 0 || movementY === void 0) {\n        movementX = event.clientX - p.x;\n        movementY = event.clientY - p.y;\n        p.set(event.clientX, event.clientY);\n      }\n      rotationManager.adjustSpherical(\n        movementX * pointerSensitivity * rotation.sensitivityX,\n        movementY * pointerSensitivity * rotation.sensitivityY\n      );\n    }\n  }\n  /**\n   * Handles pointer button events.\n   *\n   * @param event - A pointer event.\n   * @param pressed - Whether the pointer button has been pressed down.\n   */\n  handlePointerButtonEvent(event, pressed) {\n    const bindings = this.settings.pointerBindings;\n    const behaviour = this.settings.pointer.behaviour;\n    if (bindings.has(event.button)) {\n      p.set(event.clientX, event.clientY);\n      const action = bindings.get(event.button);\n      if (!(event instanceof PointerEvent && event.pointerType === \"mouse\" /* MOUSE */)) {\n        const strategy = this.strategies.get(action);\n        strategy?.execute(pressed, event);\n        if (action === 9 /* ROTATE */) {\n          this.dragging = pressed;\n        }\n      }\n      if (event instanceof PointerEvent) {\n        if (pressed && behaviour === \"default\" /* DEFAULT */) {\n          this.domElement?.setPointerCapture(event.pointerId);\n        }\n      }\n    }\n  }\n  /**\n   * Handles pointer cancel and leave events.\n   *\n   * @param event - A pointer event.\n   */\n  handlePointerCancelEvent(event) {\n    this.domElement?.removeEventListener(\"pointermove\", this);\n  }\n  /**\n   * Handles wheel events.\n   *\n   * @param event - A wheel event.\n   */\n  handleWheelEvent(event) {\n    this.rotationManager.zoom(Math.sign(event.deltaY));\n  }\n  /**\n   * Enables or disables controls based on the pointer lock state.\n   */\n  handlePointerLockEvent() {\n    this.setRotationEnabled(document.pointerLockElement === this.domElement);\n  }\n  /**\n   * Handles keyboard events.\n   *\n   * @param event - A keyboard event.\n   * @param pressed - Whether the key has been pressed down.\n   */\n  handleKeyboardEvent(event, pressed) {\n    const keyBindings = this.settings.keyBindings;\n    const code = event.code !== void 0 ? event.code : keyCodeLegacy.get(event.keyCode);\n    if (keyBindings.has(code)) {\n      event.preventDefault();\n      const strategy = this.strategies.get(keyBindings.get(code));\n      strategy?.execute(pressed);\n    }\n  }\n  /**\n   * Cancels active interactions on visibility loss.\n   */\n  handleVisibilityChangeEvent() {\n    if (document.hidden) {\n      this.domElement?.removeEventListener(\"pointermove\", this);\n    }\n  }\n  /**\n   * Reacts to setting changes.\n   *\n   * @param event - An event.\n   */\n  onSettingsChanged(event) {\n    const rotationManager = this.rotationManager;\n    const settings = this.settings;\n    const general = settings.general;\n    if (!settings.rotation.enabled) {\n      this.rotationManager.resetVelocity();\n    }\n    if (general.mode !== general.previousMode) {\n      if (general.mode === \"third-person\" /* THIRD_PERSON */) {\n        v2.copy(this.target);\n        this.target.copy(this.position);\n        this.position.sub(v2);\n      } else {\n        this.position.copy(this.target);\n        this.target.set(0, 0, -1).applyQuaternion(this.quaternion);\n      }\n      rotationManager.updateSpherical();\n    } else {\n      rotationManager.restrictSpherical();\n    }\n    rotationManager.updatePosition().updateQuaternion();\n  }\n  /**\n   * Synchronizes the internal state with external changes.\n   *\n   * @param previousPosition - The previous position.\n   * @param previousQuaternion - The previous quaternion.\n   * @param previousTarget - The previous target.\n   */\n  synchronize(previousPosition, previousQuaternion, previousTarget) {\n    const mode = this.settings.general.mode;\n    const rotationManager = this.rotationManager;\n    const position = this.position;\n    const quaternion = this.quaternion;\n    const target = this.target;\n    if (!previousQuaternion.equals(quaternion)) {\n      if (mode === \"third-person\" /* THIRD_PERSON */) {\n        target.set(0, 0, -1).applyQuaternion(quaternion);\n        target.multiplyScalar(rotationManager.radius);\n        target.add(position);\n      } else {\n        target.set(0, 0, -1).applyQuaternion(quaternion);\n      }\n      rotationManager.updateSpherical();\n    } else if (!previousTarget.equals(target)) {\n      if (!previousPosition.equals(position)) {\n        rotationManager.updateSpherical().updateQuaternion();\n      } else {\n        if (mode === \"third-person\" /* THIRD_PERSON */) {\n          rotationManager.updatePosition();\n        } else {\n          rotationManager.updateSpherical().updateQuaternion();\n        }\n      }\n    } else if (!previousPosition.equals(position)) {\n      if (mode === \"third-person\" /* THIRD_PERSON */) {\n        rotationManager.updateSpherical().updateQuaternion();\n      }\n    }\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case \"pointermove\":\n        this.handlePointerMoveEvent(event);\n        break;\n      case \"pointerdown\":\n      case \"mousedown\":\n        this.handlePointerButtonEvent(event, true);\n        break;\n      case \"pointerup\":\n      case \"mouseup\":\n        this.handlePointerButtonEvent(event, false);\n        break;\n      case \"pointercancel\":\n        this.handlePointerCancelEvent(event);\n        break;\n      case \"wheel\":\n        this.handleWheelEvent(event);\n        break;\n      case \"pointerlockchange\":\n        this.handlePointerLockEvent();\n        break;\n      case \"keydown\":\n        this.handleKeyboardEvent(event, true);\n        break;\n      case \"keyup\":\n        this.handleKeyboardEvent(event, false);\n        break;\n      case \"visibilitychange\":\n        this.handleVisibilityChangeEvent();\n        break;\n      case \"change\":\n        this.onSettingsChanged(event);\n        break;\n    }\n  }\n  update(timestamp) {\n    this.rotationManager.update(timestamp);\n  }\n  dispose() {\n    this.enabled = false;\n  }\n};\n\n// src/core/SpatialControls.ts\nimport { EventDispatcher as EventDispatcher11, Quaternion as Quaternion5, Vector3 as Vector38 } from \"three\";\n\n// src/core/TranslationControls.ts\nimport { EventDispatcher as EventDispatcher10, Quaternion as Quaternion4, Vector3 as Vector37 } from \"three\";\n\n// src/strategies/BoostStrategy.ts\nvar BoostStrategy = class {\n  /**\n   * A movement state.\n   */\n  movementState;\n  /**\n   * Constructs a new boost strategy.\n   *\n   * @param movementState - A movement state.\n   */\n  constructor(movementState) {\n    this.movementState = movementState;\n  }\n  execute(flag) {\n    this.movementState.boost = flag;\n  }\n};\n\n// src/strategies/MovementStrategy.ts\nvar MovementStrategy = class {\n  /**\n   * A movement state.\n   */\n  movementState;\n  /**\n   * A direction.\n   */\n  direction;\n  /**\n   * Constructs a new movement strategy.\n   *\n   * @param movementState - A movement state.\n   * @param direction - A direction.\n   */\n  constructor(movementState, direction) {\n    this.movementState = movementState;\n    this.direction = direction;\n  }\n  execute(flag) {\n    const state = this.movementState;\n    switch (this.direction) {\n      case 2 /* BACKWARD */:\n        state.backward = flag;\n        state.backwardBeforeForward = flag;\n        break;\n      case 0 /* FORWARD */:\n        state.forward = flag;\n        state.backwardBeforeForward = !flag;\n        break;\n      case 3 /* RIGHT */:\n        state.right = flag;\n        state.rightBeforeLeft = flag;\n        break;\n      case 1 /* LEFT */:\n        state.left = flag;\n        state.rightBeforeLeft = !flag;\n        break;\n      case 5 /* UP */:\n        state.up = flag;\n        state.upBeforeDown = flag;\n        break;\n      case 4 /* DOWN */:\n        state.down = flag;\n        state.upBeforeDown = !flag;\n        break;\n    }\n  }\n};\n\n// src/managers/TranslationManager.ts\nimport { EventDispatcher as EventDispatcher9, Vector3 as Vector36 } from \"three\";\n\n// src/managers/MovementState.ts\nvar MovementState = class {\n  /**\n   * Movement to the left.\n   */\n  left;\n  /**\n   * Movement to the right.\n   */\n  right;\n  /**\n   * Forward motion.\n   */\n  forward;\n  /**\n   * Backward motion.\n   */\n  backward;\n  /**\n   * Ascension.\n   */\n  up;\n  /**\n   * Descent.\n   */\n  down;\n  /**\n   * Controls whether backward movement currently has priority.\n   */\n  backwardBeforeForward;\n  /**\n   * Controls whether right movement currently has priority.\n   */\n  rightBeforeLeft;\n  /**\n   * Controls whether up movement currently has priority.\n   */\n  upBeforeDown;\n  /**\n   * Whether the boost multiplier should be used.\n   */\n  boost;\n  /**\n   * Constructs a new movement state.\n   */\n  constructor() {\n    this.reset();\n  }\n  /**\n   * Indicates whether any flag is currently active.\n   */\n  get active() {\n    return this.forward || this.backward || this.left || this.right || this.up || this.down;\n  }\n  /**\n   * Resets this state.\n   *\n   * @return This state.\n   */\n  reset() {\n    this.left = false;\n    this.right = false;\n    this.forward = false;\n    this.backward = false;\n    this.up = false;\n    this.down = false;\n    this.backwardBeforeForward = false;\n    this.rightBeforeLeft = false;\n    this.upBeforeDown = false;\n    this.boost = false;\n    return this;\n  }\n};\n\n// src/managers/TranslationManager.ts\nvar u2 = /* @__PURE__ */ new Vector36();\nvar v3 = /* @__PURE__ */ new Vector36();\nvar TranslationManager = class _TranslationManager extends EventDispatcher9 {\n  /**\n   * Triggers when the position or quaternion is changed.\n   *\n   * @event\n   */\n  static EVENT_UPDATE = \"update\";\n  /**\n   * @see {@link position}\n   */\n  _position;\n  /**\n   * @see {@link quaternion}\n   */\n  _quaternion;\n  /**\n   * @see {@link target}\n   */\n  _target;\n  /**\n   * The settings.\n   */\n  settings;\n  /**\n   * The movement state.\n   */\n  movementState;\n  /**\n   * The current velocity.\n   */\n  velocity0;\n  /**\n   * The target velocity.\n   */\n  velocity1;\n  /**\n   * Scalar dampers.\n   */\n  scalarDampers;\n  /**\n   * A timestamp.\n   */\n  timestamp;\n  /**\n   * A reusable update event.\n   */\n  updateEvent;\n  /**\n   * Constructs a new translation manager.\n   *\n   * @param position - The position.\n   * @param quaternion - The quaternion.\n   * @param target - The target.\n   * @param settings - The settings.\n   */\n  constructor(position, quaternion, target, settings) {\n    super();\n    this._position = position;\n    this._quaternion = quaternion;\n    this._target = target;\n    this.settings = settings;\n    this.movementState = new MovementState();\n    this.velocity0 = new Vector36();\n    this.velocity1 = new Vector36();\n    this.timestamp = 0;\n    this.updateEvent = { type: _TranslationManager.EVENT_UPDATE };\n    this.scalarDampers = [\n      new ScalarDamper(),\n      new ScalarDamper(),\n      new ScalarDamper()\n    ];\n  }\n  /**\n   * The position.\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n  }\n  /**\n   * The quaternion.\n   */\n  get quaternion() {\n    return this._quaternion;\n  }\n  set quaternion(value) {\n    this._quaternion = value;\n  }\n  /**\n   * The target.\n   */\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n  }\n  /**\n   * Resets the current velocity.\n   */\n  resetVelocity() {\n    this.velocity0.set(0, 0, 0);\n    this.velocity1.set(0, 0, 0);\n    for (const scalarDamper of this.scalarDampers) {\n      scalarDamper.resetVelocity();\n    }\n  }\n  /**\n   * Changes the position based on the current velocity and elapsed time.\n   *\n   * @param position - The position to translate.\n   * @param velocity - The velocity.\n   * @param elapsed - The time since the last frame in seconds.\n   */\n  translate(position, velocity, elapsed) {\n    const axisWeights = this.settings.translation.axisWeights;\n    v3.copy(velocity).applyQuaternion(this.quaternion);\n    if (axisWeights.x !== 1 || axisWeights.y !== 1 || axisWeights.z !== 1) {\n      v3.multiply(this.settings.translation.axisWeights).normalize();\n      v3.multiplyScalar(velocity.length() * elapsed);\n    } else {\n      v3.multiplyScalar(elapsed);\n    }\n    position.add(v3);\n    this.dispatchEvent(this.updateEvent);\n  }\n  update(timestamp) {\n    const settings = this.settings;\n    if (!settings.translation.enabled) {\n      this.timestamp = timestamp;\n      return;\n    }\n    const state = this.movementState;\n    const translation = this.settings.translation;\n    const boost = state.boost ? translation.boostMultiplier : 1;\n    const sensitivity = translation.sensitivity;\n    const scalarDampers = this.scalarDampers;\n    const v0 = this.velocity0;\n    const v1 = this.velocity1;\n    v1.setScalar(0);\n    if (state.active) {\n      if (state.backward && state.forward) {\n        v1.z = state.backwardBeforeForward ? 1 : -1;\n      } else if (state.backward) {\n        v1.z = 1;\n      } else if (state.forward) {\n        v1.z = -1;\n      }\n      if (state.right && state.left) {\n        v1.x = state.rightBeforeLeft ? 1 : -1;\n      } else if (state.right) {\n        v1.x = 1;\n      } else if (state.left) {\n        v1.x = -1;\n      }\n      if (state.up && state.down) {\n        v1.y = state.upBeforeDown ? 1 : -1;\n      } else if (state.up) {\n        v1.y = 1;\n      } else if (state.down) {\n        v1.y = -1;\n      }\n    }\n    const distance = sensitivity * boost;\n    v1.normalize().multiplyScalar(distance);\n    const elapsed = (timestamp - this.timestamp) * MILLISECONDS_TO_SECONDS;\n    this.timestamp = timestamp;\n    if (!v0.equals(v1)) {\n      if (translation.damping > 0) {\n        const damping = translation.damping;\n        const omega = ScalarDamper.calculateOmega(damping);\n        const exp = ScalarDamper.calculateExp(omega, elapsed);\n        v0.x = scalarDampers[0].interpolate(v0.x, v1.x, damping, omega, exp, elapsed);\n        v0.y = scalarDampers[1].interpolate(v0.y, v1.y, damping, omega, exp, elapsed);\n        v0.z = scalarDampers[2].interpolate(v0.z, v1.z, damping, omega, exp, elapsed);\n      } else {\n        v0.copy(v1);\n      }\n    }\n    if (v0.x !== 0 || v0.y !== 0 || v0.z !== 0) {\n      if (this.settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n        u2.copy(this.target);\n        this.translate(this.target, v0, elapsed);\n        this.target.copy(this.target);\n        this.position.add(v3.subVectors(this.target, u2));\n      } else {\n        u2.copy(this.position);\n        this.translate(this.position, v0, elapsed);\n        this.position.copy(this.position);\n      }\n    }\n  }\n};\n\n// src/core/TranslationControls.ts\nvar TranslationControls = class _TranslationControls extends EventDispatcher10 {\n  /**\n   * Triggers when the position or quaternion is changed.\n   *\n   * @event\n   */\n  static EVENT_UPDATE = \"update\";\n  /**\n   * A translation manager.\n   */\n  translationManager;\n  /**\n   * A map that links actions to specific strategies.\n   */\n  strategies;\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * The settings.\n   */\n  settings;\n  /**\n   * Constructs new controls.\n   *\n   * @param position - A position.\n   * @param quaternion - A quaternion.\n   * @param target - A target.\n   * @param settings - The settings.\n   */\n  constructor(position = new Vector37(), quaternion = new Quaternion4(), target = new Vector37(), settings = new Settings()) {\n    super();\n    this._enabled = false;\n    this.settings = settings;\n    settings.addEventListener(\"change\", (e) => this.handleEvent(e));\n    this.translationManager = new TranslationManager(position, quaternion, target, settings);\n    this.translationManager.addEventListener(_TranslationControls.EVENT_UPDATE, (e) => this.dispatchEvent(e));\n    const state = this.translationManager.movementState;\n    this.strategies = /* @__PURE__ */ new Map([\n      [0 /* MOVE_FORWARD */, new MovementStrategy(state, 0 /* FORWARD */)],\n      [1 /* MOVE_LEFT */, new MovementStrategy(state, 1 /* LEFT */)],\n      [2 /* MOVE_BACKWARD */, new MovementStrategy(state, 2 /* BACKWARD */)],\n      [3 /* MOVE_RIGHT */, new MovementStrategy(state, 3 /* RIGHT */)],\n      [4 /* MOVE_DOWN */, new MovementStrategy(state, 4 /* DOWN */)],\n      [5 /* MOVE_UP */, new MovementStrategy(state, 5 /* UP */)],\n      [8 /* BOOST */, new BoostStrategy(state)]\n    ]);\n  }\n  /**\n   * The position.\n   */\n  set position(value) {\n    this.translationManager.position = value;\n  }\n  /**\n   * The quaternion.\n   */\n  set quaternion(value) {\n    this.translationManager.quaternion = value;\n  }\n  /**\n   * The target.\n   */\n  set target(value) {\n    this.translationManager.target = value;\n  }\n  /**\n   * Indicates whether the controls are enabled.\n   *\n   * Event listeners will be registered or unregistered depending on this flag.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    if (typeof document === \"undefined\") {\n      return;\n    }\n    this.translationManager.movementState.reset();\n    if (value && !this._enabled) {\n      document.addEventListener(\"visibilitychange\", this);\n      document.body.addEventListener(\"keyup\", this);\n      document.body.addEventListener(\"keydown\", this);\n    } else if (!value && this._enabled) {\n      document.removeEventListener(\"visibilitychange\", this);\n      document.body.removeEventListener(\"keyup\", this);\n      document.body.removeEventListener(\"keydown\", this);\n    }\n    this.translationManager.resetVelocity();\n    this._enabled = value;\n  }\n  /**\n   * Handles keyboard events.\n   *\n   * @param event - A keyboard event.\n   * @param pressed - Whether the key has been pressed down.\n   */\n  handleKeyboardEvent(event, pressed) {\n    const keyBindings = this.settings.keyBindings;\n    const code = event.code !== void 0 ? event.code : keyCodeLegacy.get(event.keyCode);\n    if (keyBindings.has(code)) {\n      event.preventDefault();\n      const strategy = this.strategies.get(keyBindings.get(code));\n      strategy?.execute(pressed);\n    }\n  }\n  /**\n   * Cancels active interactions on visibility loss.\n   */\n  handleVisibilityChangeEvent() {\n    if (document.hidden) {\n      this.translationManager.movementState.reset();\n    }\n  }\n  /**\n   * Reacts to setting changes.\n   *\n   * @param event - An event.\n   */\n  onSettingsChanged(event) {\n    if (!this.settings.translation.enabled) {\n      this.translationManager.resetVelocity();\n    }\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case \"keydown\":\n        this.handleKeyboardEvent(event, true);\n        break;\n      case \"keyup\":\n        this.handleKeyboardEvent(event, false);\n        break;\n      case \"visibilitychange\":\n        this.handleVisibilityChangeEvent();\n        break;\n      case \"change\":\n        this.onSettingsChanged(event);\n        break;\n    }\n  }\n  update(timestamp) {\n    this.translationManager.update(timestamp);\n  }\n  dispose() {\n    this.enabled = false;\n  }\n};\n\n// src/core/SpatialControls.ts\nvar v4 = /* @__PURE__ */ new Vector38();\nfunction applyConstraints(p2, constraints) {\n  for (const applyConstraint of constraints) {\n    p2 = applyConstraint(p2);\n  }\n  return p2;\n}\nvar SpatialControls = class _SpatialControls extends EventDispatcher11 {\n  /**\n   * Triggers when the position or quaternion is changed.\n   *\n   * @event\n   */\n  static EVENT_UPDATE = \"update\";\n  /**\n   * @see {@link domElement}\n   */\n  _domElement;\n  /**\n   * @see {@link position}\n   */\n  _position;\n  /**\n   * @see {@link quaternion}\n   */\n  _quaternion;\n  /**\n   * @see {@link target}\n   */\n  _target;\n  /**\n   * The previous position.\n   */\n  previousPosition;\n  /**\n   * The previous quaternion.\n   */\n  previousQuaternion;\n  /**\n   * The previous target.\n   */\n  previousTarget;\n  /**\n   * Rotation controls.\n   */\n  rotationControls;\n  /**\n   * Translation controls.\n   */\n  translationControls;\n  /**\n   * @see {@link enabled}\n   */\n  _enabled;\n  /**\n   * The control settings.\n   */\n  settings;\n  /**\n   * Custom constraints for {@link position} and {@link target}.\n   */\n  constraints;\n  /**\n   * Constructs new controls.\n   *\n   * @param position - A position.\n   * @param quaternion - A quaternion.\n   * @param domElement - A DOM element. Serves as the primary event target.\n   */\n  constructor(position = new Vector38(), quaternion = new Quaternion5(), domElement = null) {\n    super();\n    if (domElement === null && typeof document !== \"undefined\") {\n      domElement = document.body;\n    }\n    this._domElement = null;\n    this._enabled = false;\n    const target = new Vector38();\n    this._target = target;\n    this._position = position;\n    this._quaternion = quaternion;\n    this.previousPosition = new Vector38();\n    this.previousQuaternion = new Quaternion5();\n    this.previousTarget = new Vector38();\n    const settings = new Settings();\n    settings.addEventListener(\"change\", (e) => this.handleEvent(e));\n    this.settings = settings;\n    const constraints = /* @__PURE__ */ new Set();\n    this.constraints = constraints;\n    this.rotationControls = new RotationControls(position, quaternion, target, settings);\n    this.translationControls = new TranslationControls(position, quaternion, target, settings);\n    this.rotationControls.addEventListener(_SpatialControls.EVENT_UPDATE, (e) => this.dispatchEvent(e));\n    this.translationControls.addEventListener(_SpatialControls.EVENT_UPDATE, (e) => this.dispatchEvent(e));\n    if (position !== null && quaternion !== null) {\n      this._target.set(0, 0, -1).applyQuaternion(this._quaternion);\n      this.lookAt(this._target);\n      this.domElement = domElement;\n      this.enabled = true;\n      this.previousPosition.copy(this.position);\n      this.previousQuaternion.copy(this.quaternion);\n      this.previousTarget.copy(this.target);\n    }\n  }\n  /**\n   * A DOM element. Acts as the primary event target.\n   */\n  get domElement() {\n    return this._domElement;\n  }\n  set domElement(value) {\n    this._domElement = value;\n    this.rotationControls.domElement = value;\n    const enabled = this.enabled;\n    this.dispose();\n    this.enabled = enabled;\n  }\n  /**\n   * The position.\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n    this.rotationControls.position = value;\n    this.translationControls.position = value;\n  }\n  /**\n   * The quaternion.\n   */\n  get quaternion() {\n    return this._quaternion;\n  }\n  set quaternion(value) {\n    this._quaternion = value;\n    this.rotationControls.quaternion = value;\n    this.translationControls.quaternion = value;\n  }\n  /**\n   * The target.\n   */\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n    this.rotationControls.target = value;\n    this.translationControls.target = value;\n  }\n  /**\n   * Looks at the given point.\n   *\n   * @param x - The X-coordinate, or a point.\n   * @param y - The Y-coordinate.\n   * @param z - The Z-coordinate.\n   * @return This instance.\n   */\n  lookAt(x2, y2, z2) {\n    if (x2 instanceof Vector38) {\n      this.rotationControls.lookAt(x2);\n    } else {\n      this.rotationControls.lookAt(v4.set(x2, y2, z2));\n    }\n    return this;\n  }\n  /**\n   * Returns the current view direction.\n   *\n   * @param view - A vector to store the direction in.\n   * @return The normalized view direction.\n   */\n  getViewDirection(view) {\n    return this.rotationControls.getViewDirection(view);\n  }\n  /**\n   * Indicates whether the controls are enabled.\n   *\n   * Event listeners will be registered or unregistered depending on this flag.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    this.rotationControls.enabled = value;\n    this.translationControls.enabled = value;\n  }\n  /**\n   * Copies the given controls.\n   *\n   * @param controls - A controls instance.\n   * @return This instance.\n   */\n  copy(controls) {\n    this.position = controls.position;\n    this.quaternion = controls.quaternion;\n    this.target = controls.target;\n    this.domElement = controls.domElement;\n    this.settings.copy(controls.settings);\n    return this.lookAt(this.target);\n  }\n  /**\n   * Clones this instance.\n   *\n   * @return The cloned controls.\n   */\n  clone() {\n    const clone = new _SpatialControls();\n    return clone.copy(this);\n  }\n  /**\n   * Synchronizes the internal state with external changes.\n   */\n  synchronize() {\n    this.rotationControls.synchronize(\n      this.previousPosition,\n      this.previousQuaternion,\n      this.previousTarget\n    );\n  }\n  /**\n   * Constrains the given vector.\n   *\n   * @param A vector.\n   * @return The constrained vector.\n   */\n  applyConstraints() {\n    if (this.constraints.size === 0) {\n      return;\n    }\n    if (this.settings.general.mode === \"third-person\" /* THIRD_PERSON */) {\n      v4.copy(this.target);\n      this.target.copy(applyConstraints(this.target, this.constraints));\n      this.position.add(v4.subVectors(this.target, v4));\n    } else {\n      this.position.copy(applyConstraints(this.position, this.constraints));\n    }\n  }\n  /**\n   * Reacts to setting changes.\n   *\n   * @param event - An event.\n   */\n  onSettingsChanged(event) {\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n    this.previousTarget.copy(this.target);\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case \"change\":\n        this.onSettingsChanged(event);\n        break;\n    }\n  }\n  update(timestamp) {\n    this.synchronize();\n    this.rotationControls.update(timestamp);\n    this.translationControls.update(timestamp);\n    this.applyConstraints();\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n    this.previousTarget.copy(this.target);\n  }\n  dispose() {\n    this.enabled = false;\n  }\n};\nexport {\n  Action,\n  Bindings,\n  BoostStrategy,\n  ControlMode,\n  Direction,\n  GeneralSettings,\n  KeyCode,\n  MovementState,\n  MovementStrategy,\n  PointerBehaviour,\n  PointerButton,\n  PointerSettings,\n  PointerType,\n  RotationControls,\n  RotationManager,\n  RotationSettings,\n  RotationStrategy,\n  ScalarDamper,\n  Settings,\n  SpatialControls,\n  TranslationControls,\n  TranslationManager,\n  TranslationSettings,\n  ZoomSettings,\n  ZoomStrategy\n};\n"],
  "mappings": "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AAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAsB;AAAA,EAC3B;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC;AAAA,IAAI;AAAA;AAAA,EAAkB;AAAA,EACvB;AAAA,IAAC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",
  "names": ["_a"]
}
