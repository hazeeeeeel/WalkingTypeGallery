import { EventDispatcher, Quaternion, Vector3 } from "three";
import { Settings } from "../settings/Settings.js";
import { ControlsEventMap } from "./ControlsEventMap.js";
import { Disposable } from "./Disposable.js";
import { Updatable } from "./Updatable.js";
/**
 * 3D translation controls.
 *
 * This class emits events of type {@link EVENT_UPDATE} when the position is changed.
 *
 * @group Core
 */
export declare class TranslationControls extends EventDispatcher<ControlsEventMap> implements Disposable, EventListenerObject, Updatable {
    /**
     * Triggers when the position or quaternion is changed.
     *
     * @event
     */
    static readonly EVENT_UPDATE = "update";
    /**
     * A translation manager.
     */
    private translationManager;
    /**
     * A map that links actions to specific strategies.
     */
    private strategies;
    /**
     * @see {@link enabled}
     */
    private _enabled;
    /**
     * The settings.
     */
    readonly settings: Settings;
    /**
     * Constructs new controls.
     *
     * @param position - A position.
     * @param quaternion - A quaternion.
     * @param target - A target.
     * @param settings - The settings.
     */
    constructor(position?: Vector3, quaternion?: Quaternion, target?: Vector3, settings?: Settings);
    /**
     * The position.
     */
    set position(value: Vector3);
    /**
     * The quaternion.
     */
    set quaternion(value: Quaternion);
    /**
     * The target.
     */
    set target(value: Vector3);
    /**
     * Indicates whether the controls are enabled.
     *
     * Event listeners will be registered or unregistered depending on this flag.
     */
    get enabled(): boolean;
    set enabled(value: boolean);
    /**
     * Handles keyboard events.
     *
     * @param event - A keyboard event.
     * @param pressed - Whether the key has been pressed down.
     */
    private handleKeyboardEvent;
    /**
     * Cancels active interactions on visibility loss.
     */
    private handleVisibilityChangeEvent;
    /**
     * Reacts to setting changes.
     *
     * @param event - An event.
     */
    private onSettingsChanged;
    handleEvent(event: Event): void;
    update(timestamp: number): void;
    dispose(): void;
}
