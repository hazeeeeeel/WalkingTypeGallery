import { EventDispatcher, Quaternion, Vector3 } from "three";
import { Settings } from "../settings/Settings.js";
import { ControlsEventMap } from "./ControlsEventMap.js";
import { Disposable } from "./Disposable.js";
import { Updatable } from "./Updatable.js";
/**
 * 3D rotation controls.
 *
 * This class emits events of type {@link EVENT_UPDATE} when the quaternion is changed.
 *
 * @group Core
 */
export declare class RotationControls extends EventDispatcher<ControlsEventMap> implements Disposable, EventListenerObject, Updatable {
    /**
     * Triggers when the quaternion is changed.
     *
     * @event
     */
    static readonly EVENT_UPDATE = "update";
    /**
     * @see {@link domElement}
     */
    private _domElement;
    /**
     * A rotation manager.
     */
    private rotationManager;
    /**
     * A map that links actions to specific strategies.
     */
    private strategies;
    /**
     * Indicates whether the user is currently holding the pointer button down.
     */
    private dragging;
    /**
     * @see {@link enabled}
     */
    private _enabled;
    /**
     * The control settings.
     */
    readonly settings: Settings;
    /**
     * Constructs new controls.
     *
     * @param position - A position.
     * @param quaternion - A quaternion.
     * @param target - A target.
     * @param settings - The settings.
     */
    constructor(position?: Vector3, quaternion?: Quaternion, target?: Vector3, settings?: Settings);
    /**
     * A DOM element. Acts as the primary event target.
     */
    get domElement(): HTMLElement | null;
    set domElement(value: HTMLElement | null);
    /**
     * The position.
     */
    get position(): Vector3;
    set position(value: Vector3);
    /**
     * The quaternion.
     */
    get quaternion(): Quaternion;
    set quaternion(value: Quaternion);
    /**
     * The target.
     */
    get target(): Vector3;
    set target(value: Vector3);
    /**
     * Looks at the given point.
     *
     * @param x - The X-coordinate, or a point.
     * @param y - The Y-coordinate.
     * @param z - The Z-coordinate.
     * @return This instance.
     */
    lookAt(x: number | Vector3, y?: number, z?: number): RotationControls;
    /**
     * Returns the current view direction.
     *
     * @param view - A vector to store the direction in.
     * @return The normalized view direction.
     */
    getViewDirection(view: Vector3): Vector3;
    /**
     * Indicates whether the controls are enabled.
     *
     * Event listeners will be registered or unregistered depending on this flag.
     */
    get enabled(): boolean;
    set enabled(value: boolean);
    /**
     * Locks or unlocks the pointer.
     *
     * @see {@link handlePointerLockEvent}
     * @param locked - Whether the pointer should be locked.
     */
    setPointerLocked(locked?: boolean): void;
    /**
     * Enables or disables the rotation mode.
     *
     * @param enabled - Whether the rotation mode should be activated.
     */
    setRotationEnabled(enabled: boolean): void;
    /**
     * Handles pointer move events.
     *
     * @param event - A pointer event.
     */
    private handlePointerMoveEvent;
    /**
     * Handles pointer button events.
     *
     * @param event - A pointer event.
     * @param pressed - Whether the pointer button has been pressed down.
     */
    private handlePointerButtonEvent;
    /**
     * Handles pointer cancel and leave events.
     *
     * @param event - A pointer event.
     */
    private handlePointerCancelEvent;
    /**
     * Handles wheel events.
     *
     * @param event - A wheel event.
     */
    private handleWheelEvent;
    /**
     * Enables or disables controls based on the pointer lock state.
     */
    private handlePointerLockEvent;
    /**
     * Handles keyboard events.
     *
     * @param event - A keyboard event.
     * @param pressed - Whether the key has been pressed down.
     */
    private handleKeyboardEvent;
    /**
     * Cancels active interactions on visibility loss.
     */
    private handleVisibilityChangeEvent;
    /**
     * Reacts to setting changes.
     *
     * @param event - An event.
     */
    private onSettingsChanged;
    /**
     * Synchronizes the internal state with external changes.
     *
     * @param previousPosition - The previous position.
     * @param previousQuaternion - The previous quaternion.
     * @param previousTarget - The previous target.
     */
    synchronize(previousPosition: Vector3, previousQuaternion: Quaternion, previousTarget: Vector3): void;
    handleEvent(event: Event): void;
    update(timestamp: number): void;
    dispose(): void;
}
