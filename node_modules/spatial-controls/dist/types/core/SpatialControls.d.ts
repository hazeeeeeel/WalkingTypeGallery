import { EventDispatcher, Quaternion, Vector3 } from "three";
import { Settings } from "../settings/Settings.js";
import { Constraint } from "./Constraint.js";
import { ControlsEventMap } from "./ControlsEventMap.js";
import { Disposable } from "./Disposable.js";
import { Updatable } from "./Updatable.js";
/**
 * Spatial controls for 3D translation and rotation.
 *
 * This class emits events of type {@link EVENT_UPDATE} when the position or quaternion is changed.
 *
 * @group Core
 */
export declare class SpatialControls extends EventDispatcher<ControlsEventMap> implements Disposable, EventListenerObject, Updatable {
    /**
     * Triggers when the position or quaternion is changed.
     *
     * @event
     */
    static readonly EVENT_UPDATE = "update";
    /**
     * @see {@link domElement}
     */
    private _domElement;
    /**
     * @see {@link position}
     */
    private _position;
    /**
     * @see {@link quaternion}
     */
    private _quaternion;
    /**
     * @see {@link target}
     */
    private _target;
    /**
     * The previous position.
     */
    private previousPosition;
    /**
     * The previous quaternion.
     */
    private previousQuaternion;
    /**
     * The previous target.
     */
    private previousTarget;
    /**
     * Rotation controls.
     */
    private rotationControls;
    /**
     * Translation controls.
     */
    private translationControls;
    /**
     * @see {@link enabled}
     */
    private _enabled;
    /**
     * The control settings.
     */
    readonly settings: Settings;
    /**
     * Custom constraints for {@link position} and {@link target}.
     */
    readonly constraints: Set<Constraint<Vector3>>;
    /**
     * Constructs new controls.
     *
     * @param position - A position.
     * @param quaternion - A quaternion.
     * @param domElement - A DOM element. Serves as the primary event target.
     */
    constructor(position?: Vector3, quaternion?: Quaternion, domElement?: HTMLElement | null);
    /**
     * A DOM element. Acts as the primary event target.
     */
    get domElement(): HTMLElement | null;
    set domElement(value: HTMLElement | null);
    /**
     * The position.
     */
    get position(): Vector3;
    set position(value: Vector3);
    /**
     * The quaternion.
     */
    get quaternion(): Quaternion;
    set quaternion(value: Quaternion);
    /**
     * The target.
     */
    get target(): Vector3;
    set target(value: Vector3);
    /**
     * Looks at the given point.
     *
     * @param x - The X-coordinate, or a point.
     * @param y - The Y-coordinate.
     * @param z - The Z-coordinate.
     * @return This instance.
     */
    lookAt(x: number | Vector3, y?: number, z?: number): SpatialControls;
    /**
     * Returns the current view direction.
     *
     * @param view - A vector to store the direction in.
     * @return The normalized view direction.
     */
    getViewDirection(view: Vector3): Vector3;
    /**
     * Indicates whether the controls are enabled.
     *
     * Event listeners will be registered or unregistered depending on this flag.
     */
    get enabled(): boolean;
    set enabled(value: boolean);
    /**
     * Copies the given controls.
     *
     * @param controls - A controls instance.
     * @return This instance.
     */
    copy(controls: SpatialControls): SpatialControls;
    /**
     * Clones this instance.
     *
     * @return The cloned controls.
     */
    clone(): SpatialControls;
    /**
     * Synchronizes the internal state with external changes.
     */
    synchronize(): void;
    /**
     * Constrains the given vector.
     *
     * @param A vector.
     * @return The constrained vector.
     */
    private applyConstraints;
    /**
     * Reacts to setting changes.
     *
     * @param event - An event.
     */
    private onSettingsChanged;
    handleEvent(event: Event): void;
    update(timestamp: number): void;
    dispose(): void;
}
