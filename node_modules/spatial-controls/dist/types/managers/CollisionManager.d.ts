import { EventDispatcher, Quaternion, Vector3 } from "three";
import { Updatable } from "../core/Updatable.js";
import { Settings } from "../settings/Settings.js";
import { ManagerEventMap } from "./ManagerEventMap.js";
/**
 * A collision manager.
 *
 * @experimental
 * @group Managers
 */
export declare class CollisionManager extends EventDispatcher<ManagerEventMap> implements Updatable {
    /**
     * Triggers when the position or quaternion is changed.
     *
     * @event
     */
    static readonly EVENT_UPDATE = "update";
    /**
     * @see {@link position}
     */
    private _position;
    /**
     * @see {@link quaternion}
     */
    private _quaternion;
    /**
     * @see {@link target}
     */
    private _target;
    /**
     * The settings.
     */
    private settings;
    /**
     * Constructs a new translation manager.
     *
     * @param position - The position.
     * @param quaternion - The quaternion.
     * @param target - The target.
     * @param settings - The settings.
     */
    constructor(position: Vector3, quaternion: Quaternion, target: Vector3, settings: Settings);
    /**
     * The position.
     */
    get position(): Vector3;
    set position(value: Vector3);
    /**
     * The quaternion.
     */
    get quaternion(): Quaternion;
    set quaternion(value: Quaternion);
    /**
     * The target.
     */
    get target(): Vector3;
    set target(value: Vector3);
    /**
     * Performs collision tests.
     */
    private collisionTest;
    update(timestamp: number): void;
}
